import ctypes
import subprocess
import os
import base64
import socket
import platform
import datetime
import getpass
from github import Github

class OSChecker():
    def __init__(self, script_name, access_token):
        self.script_name = script_name
        self.access_token = access_token

    def create_log(self, status):
        '''Create a log (success/failed) depending on the script's results'''
        LOGS_FOLDER_PATH = 'logs'
        current_datetime = datetime.datetime.now()
        content = f"Script Name: {self.script_name}\nExecution time: {current_datetime}\nStatus: {status}\n\n"
        username = getpass.getuser()
        hostname = socket.gethostname()
        os_name = platform.system()
        filename = f"{os_name}_{hostname}_{username}"
        g = Github(self.access_token)
        repo = g.get_repo("rsecurity12/python_opdracht")

        try:
            existing_file = repo.get_contents(f"{LOGS_FOLDER_PATH}/{filename}")
            sha = existing_file.sha
            existing_content = base64.b64decode(existing_file.content).decode()
            new_content = existing_content + '\n' + content
            repo.update_file(existing_file.path, "Update log", new_content, sha)
        except Exception as e:
            if 'Not Found' in str(e):
                new_file = repo.create_file(f"{LOGS_FOLDER_PATH}/{filename}", "New log", content)
            else:
                pass

    def run_windows_info_collector(self):
        '''Perform basic information gathering on Windows'''
        WINDOWS_OUTPUT_FILE_PATH = r"C:\Users\Public\gather_info\windows_info.txt"
        GATHER_INFO_WINDOWS_PATH = r"C:\Users\Public\gather_info"
        if not os.path.exists(GATHER_INFO_WINDOWS_PATH):
            os.makedirs(GATHER_INFO_WINDOWS_PATH)
        with open(WINDOWS_OUTPUT_FILE_PATH, "w") as output_file:
            gather_admin_result = subprocess.run(["net", "localgroup", "administrators"], capture_output=True, text=True)
            gather_user_result = subprocess.run(["net", "users"], capture_output=True, text=True)
            systeminfo = subprocess.run(['systeminfo'], capture_output=True, text=True)
            try:
                is_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0
                output_file.write("Administrative privileges:\nUser has administrative privileges\n\n" if is_admin else "Administrative privileges:\nUser does not have administrative privileges\n\n")
            except:
                output_file.write("Administrative privileges:\nUser does not have administrative privileges\n\n")
            output_file.write(f"Admin group:\n{gather_admin_result.stdout}\n\n")
            output_file.write(f"Users in the target:{gather_user_result.stdout}\n\n")
            output_file.write(f"Systeminfo output for suggester:\n{systeminfo.stdout}")

    def run_linux_info_collector(self):
        LINUX_OUTPUT_FILE_PATH = "/tmp/linux_info/linux_info.txt"
        GATHER_INFO_LINUX_PATH = "/tmp/linux_info"
        if not os.path.exists(GATHER_INFO_LINUX_PATH):
            os.makedirs(GATHER_INFO_LINUX_PATH)
        with open(LINUX_OUTPUT_FILE_PATH, "w") as output_file:
            os_name = subprocess.check_output(['uname', '-s']).decode().strip()
            os_version = subprocess.check_output(['uname', '-r']).decode().strip()
            os_details = subprocess.check_output(['uname', '-a']).decode().strip()
            gather_user_result = subprocess.run(['cat', '/etc/passwd'], capture_output=True, text=True)
            gather_admin_result = subprocess.run(['getent', 'group', 'sudo'], capture_output=True, text=True)
            try:
                subprocess.run(['which', 'systemctl'], check=True)
                output_file.write("Systemd is installed\n\n")
            except subprocess.CalledProcessError:
                output_file.write("Systemd is not installed\n\n")
            try:
                subprocess.run(['which', 'ufw'], check=True)
                output_file.write("UFW is installed\n\n")
            except subprocess.CalledProcessError:
                output_file.write("UFW is not installed\n\n")
            try:
                subprocess.run(['which', 'selinuxenabled'], check=True)
                subprocess.run(['selinuxenabled'], check=True)
                output_file.write("SELinux is enabled\n\n")
            except subprocess.CalledProcessError:
                output_file.write("SELinux is not enabled\n\n")
            output_file.write(f"OS Name: {os_name}\n\n")
            output_file.write(f"OS Version: {os_version}\n\n")
            output_file.write(f"OS Details: {os_details}\n\n")
            output_file.write(f"Users in the system: {gather_user_result.stdout}\n\n")
            output_file.write(f"Users with sudo privileges: {gather_admin_result.stdout}\n\n")

    def run(self):
        system = platform.system()
        if system == "Linux":
            self.run_linux_info_collector()
        elif system == "Windows":
            self.run_windows_info_collector()

if __name__ == "__main__":
    script_name = "OSChecker"
    access_token = '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'
    osc = OSChecker(script_name, access_token)
    try:
        osc.run()
        osc.create_log("success")
    except Exception:
        osc.create_log("failed")